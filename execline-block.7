.Dd February 16, 2021
.Dt EXECLINE-BLOCK 7
.Os
.Sh NAME
.Nm execline-block
.Nd overview of execline blocks
.Sh DESCRIPTION
A command line (and thus an execline script) is one-dimensional.
But a Unix execution flow can be
.Em two Ns
-dimensional: when two instructions are sequenced, for instance.
In that case, we need a way to extract
.Em two
command lines from
.Em one
argv.
That is precisely what
.Em blocks
are made for.
.Pp
execline commands that need more than one linear set of arguments use
blocks.
For instance, the
.Xr foreground 1
command needs to spawn a first process, then execute into a second one.
It reads the command line for the first process from a block, and the
command line for the second process from the rest of the argv.
In the following script:
.Bd -literal -offset indent
#!/command/execlineb
foreground { echo 1 } echo 2
.Ed
.Pp
.Ql echo 1
is read from a block and spawned; then
.Ql echo 2
is executed.
.Ss execlineb syntax
In
.Xr execlineb 1
scripts, blocks are delimited by braces.
They can be nested.
.Ss argv syntax
.Xr execlineb 1
reads and parses the script, and converts it into an
.Em argv
(a simple Unix command line) with a different syntax for blocks.
In an argv, blocks are not delimited by braces; they are made of
.Em quoted arguments
and terminated by an empty word
.Po
\(dq\(dq
.Pc .
A quoted argument begins with a space.
Nested blocks are represented by arguments being quoted several times,
i.e. having several spaces in front of them; an empty word inside a
block gets quoted too, i.e. it will be represented as a series of
spaces.
.Pp
Actually, the block-reading commands know nothing about braces;
they only understand the
.Dq quoted arguments + empty word
syntax.
So if you want to use
.Xr foreground 1
from your shell to sequence
.Ql echo 1
and
.Ql echo 2 ,
you will have to write
.Bd -literal -offset indent
$ foreground ' echo' ' 1' '' echo 2
.Ed
.Pp
You do not really need to quote every argument inside a block in that
simple case.
The following command works as well:
.Bd -literal -offset indent
$ foreground echo 1 '' echo 2
.Ed
.Pp
However, this is bad practice, because it leads to a security hole:
commands that perform substitution
.Po
\&.cf
.Xr execline-substitute 7
.Pc
inside a block may produce empty words, which may modify your script's execution flow.
.Bd -literal -offset indent
$ define FOO '' foreground ' echo' ' ${FOO}' ' rm' ' -rf' ' /' '' echo blah
.Ed
.Pp
is safe, whereas
.Bd -literal -offset indent
$ define FOO '' foreground echo '${FOO}' rm -rf / '' echo blah
.Ed
.Pp
has very much unwanted results.
(Don't try this at home.)
.Pp
You can use the
.Ev EXECLINE_STRICT
environment variable to check proper block quoting.
If that variable contains
.Ql 1 ,
commands that read blocks will print a warning message every time they
find an unquoted argument inside a block.
If that variable contains
.Ql 2
or a bigger integer, commands will print an error message and die on
unquoted arguments.
.Pp
You can use
.Xr execlineb 1 Ap Ns
s
.Fl w
or
.Fl W
switch to set
.Ev EXECLINE_STRICT
to
.Ql 1
or
.Ql 2 .
.Sh SEE ALSO
.Xr execlineb 1 ,
.Xr foreground 1 ,
.Xr execline-substitute 7
.Pp
This man page is ported from the authoritative documentation at:
.Lk https://skarnet.org/software/execline/el_semicolon.html.html
.Sh AUTHORS
.An Laurent Bercot
.An Alexis Ao Mt flexibeast@gmail.com Ac (man page port)
